#+STARTUP: latexpreview
#+OPTIONS: tex:t

* The Elements of Computing Systems: Building a Modern Computer from First Principles

#+BEGIN_QUOTE
The cognitive ability to “divide and conquer” a complex system into manageable modules is empowered by yet another cognitive gift: our ability to discern between the abstraction and the implementation of each module. In computer science, we take these words concretely: abstraction describes what the module does, and implementation describes how it does it. With this distinction in mind, here is the most important rule in system engineering: when using a module as a building block—any module—you are to focus exclusively on the module’s abstraction, ignoring completely its implementation details.
#+END_QUOTE

** Hardware

*** Boolean Logic

#+BEGIN_QUOTE
The use of Boolean algebra for analyzing the abstract behavior of logic gates was articulated in 1937 by Claude Shannon, leading to what is sometimes described as the most important M.Sc. thesis in computer science. (p. 38)
#+END_QUOTE

| Operator | Math           | Formal       |
|----------+----------------+--------------|
| And      | $x \cdot y$    | $x \wedge y$ |
| Or       | $x + y$        | $x \vee y$   |
| Not      | $\overline{x}$ | $\neg x$     |

**** Not
If (in) then out = 0, else out = 1

$f(x) = \neg x$

#+begin_src hdl :tangle projects/01/Not.hdl
CHIP Not {
    IN in;
    OUT out;

    PARTS:
    Nand(a=in, b=in, out=out);
}
#+end_src

**** And
if (a and b) then out = 1, else out = 0

$f(x, y) = x \wedge y$

#+begin_src hdl :tangle projects/01/And.hdl
CHIP And {
    IN a, b;
    OUT out;

    PARTS:
    Nand(a=a, b=b, out=neg);
    Not(in=neg, out=out);
}
#+end_src

**** Or
if (a or b) then out = 1, else out = 0

$f(x, y) = x \vee y$

#+begin_src hdl :tangle projects/01/Or.hdl
CHIP Or {
    IN a, b;
    OUT out;

    PARTS:
    Not(in=a, out=na);
    Not(in=b, out=nb);
    Nand(a=na, b=nb, out=out);
}
#+end_src

**** Xor
if ((a and Not(b) or (Not(a) and b)) then out = 1, else out = 0

$f(x, y) = (a \wedge \neg b) \vee (\neg a \wedge b)$

The naive implementation is straightforward:

#+begin_src hdl :tangle projects/01/BadXor.hdl
CHIP BadXor {
    IN a, b;
    OUT out;

    PARTS:
    Not(in=a, out=na);
    Not(in=b, out=nb);
    And(a=a, b=nb, out=fst);
    And(b=b, a=na, out=snd);
    Or(a=fst, b=snd, out=out);
}
#+end_src

Since we're using NAND as our basic building block here, AND/OR become expensive gates, costing 2 and 3 NAND, respectively. So this implementation uses 9 NAND. We can do better by applying De Morgan's Law, which defines the following tranformation rules:

$\neg (x \wedge y) \vdash (\neg x \vee \neg y)$

$\neg (x \vee y) \vdash (\neg x \wedge \neg y)$

So, our XOR function can be optimized to use only 5 NAND:

$f(x, y) = (a \wedge \neg b) \vee (\neg a \wedge b)$

$f(x, y) = \neg \neg ((a \wedge \neg b) \vee (\neg a \wedge b))$

$f(x, y) = \neg (\neg (a \wedge \neg b) \wedge \neg (\neg a \wedge b))$

That is: Nand(Nand(a, Not(b)), Nand(Not(a), b))

#+begin_src hdl :tangle projects/01/Xor.hdl
CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Not(in=a, out=na);
    Not(in=b, out=nb);
    Nand(a=a, b=nb, out=fst);
    Nand(b=b, a=na, out=snd);
    Nand(a=fst, b=snd, out=out);
}
#+end_src

**** Mux
A multiplexer forwards a *given input* based on a selection criteria. N:1

if sel == 0 then out = a, else out = b

The logic is dead simple, short-circuit the unwanted value with SEL.

$f(x, y, s) = (x \wedge \neg s) \vee (y \wedge s)$

#+begin_src hdl :tangle projects/01/Mux.hdl
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in=sel, out=nsel);
    Nand(a=a, b=nsel, out=x);
    Nand(a=b, b=sel, out=y);
    Nand(a=x, b=y, out=out);
}
#+end_src

**** Demux
A demultiplexer is the opposite. It forwards to a *given output* based on a selection criteria. 1:N

if sel == 0 then out = a, else out = b

$a(x, s) = x \wedge \neg s$

$b(x, s) = x \wedge s$

#+begin_src hdl :tangle projects/01/DMux.hdl
CHIP DMux {
    IN in, sel;
    OUT a, b;

    PARTS:
    Not(in=sel, out=nsel);
    And(a=in, b=sel, out=b);
    And(a=in, b=nsel, out=a);
}
#+end_src

**** Multi-bit Gates
#+begin_quote
The bits are indexed from right to left, the rightmost bit being the 0'th bit and the leftmost bit being the 15'th bit (in a 16-bit setting). (p. 49)
#+end_quote

#+begin_src hdl :tangle projects/01/Not16.hdl
CHIP Not16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Not(in=in[0], out=out[0]);
    Not(in=in[1], out=out[1]);
    Not(in=in[2], out=out[2]);
    Not(in=in[3], out=out[3]);
    Not(in=in[4], out=out[4]);
    Not(in=in[5], out=out[5]);
    Not(in=in[6], out=out[6]);
    Not(in=in[7], out=out[7]);
    Not(in=in[8], out=out[8]);
    Not(in=in[9], out=out[9]);
    Not(in=in[10], out=out[10]);
    Not(in=in[11], out=out[11]);
    Not(in=in[12], out=out[12]);
    Not(in=in[13], out=out[13]);
    Not(in=in[14], out=out[14]);
    Not(in=in[15], out=out[15]);
}
#+end_src

#+begin_src hdl :tangle projects/01/And16.hdl
CHIP And16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    And(a=a[0], b=b[0], out=out[0]);
    And(a=a[1], b=b[1], out=out[1]);
    And(a=a[2], b=b[2], out=out[2]);
    And(a=a[3], b=b[3], out=out[3]);
    And(a=a[4], b=b[4], out=out[4]);
    And(a=a[5], b=b[5], out=out[5]);
    And(a=a[6], b=b[6], out=out[6]);
    And(a=a[7], b=b[7], out=out[7]);
    And(a=a[8], b=b[8], out=out[8]);
    And(a=a[9], b=b[9], out=out[9]);
    And(a=a[10], b=b[10], out=out[10]);
    And(a=a[11], b=b[11], out=out[11]);
    And(a=a[12], b=b[12], out=out[12]);
    And(a=a[13], b=b[13], out=out[13]);
    And(a=a[14], b=b[14], out=out[14]);
    And(a=a[15], b=b[15], out=out[15]);
}
#+end_src

#+begin_src hdl :tangle projects/01/Or16.hdl
CHIP Or16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    Or(a=a[0], b=b[0], out=out[0]);
    Or(a=a[1], b=b[1], out=out[1]);
    Or(a=a[2], b=b[2], out=out[2]);
    Or(a=a[3], b=b[3], out=out[3]);
    Or(a=a[4], b=b[4], out=out[4]);
    Or(a=a[5], b=b[5], out=out[5]);
    Or(a=a[6], b=b[6], out=out[6]);
    Or(a=a[7], b=b[7], out=out[7]);
    Or(a=a[8], b=b[8], out=out[8]);
    Or(a=a[9], b=b[9], out=out[9]);
    Or(a=a[10], b=b[10], out=out[10]);
    Or(a=a[11], b=b[11], out=out[11]);
    Or(a=a[12], b=b[12], out=out[12]);
    Or(a=a[13], b=b[13], out=out[13]);
    Or(a=a[14], b=b[14], out=out[14]);
    Or(a=a[15], b=b[15], out=out[15]);
}
#+end_src

#+begin_src hdl :tangle projects/01/Mux16.hdl
CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:
    Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
    Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
    Mux(a=a[2], b=b[2], sel=sel, out=out[2]);
    Mux(a=a[3], b=b[3], sel=sel, out=out[3]);
    Mux(a=a[4], b=b[4], sel=sel, out=out[4]);
    Mux(a=a[5], b=b[5], sel=sel, out=out[5]);
    Mux(a=a[6], b=b[6], sel=sel, out=out[6]);
    Mux(a=a[7], b=b[7], sel=sel, out=out[7]);
    Mux(a=a[8], b=b[8], sel=sel, out=out[8]);
    Mux(a=a[9], b=b[9], sel=sel, out=out[9]);
    Mux(a=a[10], b=b[10], sel=sel, out=out[10]);
    Mux(a=a[11], b=b[11], sel=sel, out=out[11]);
    Mux(a=a[12], b=b[12], sel=sel, out=out[12]);
    Mux(a=a[13], b=b[13], sel=sel, out=out[13]);
    Mux(a=a[14], b=b[14], sel=sel, out=out[14]);
    Mux(a=a[15], b=b[15], sel=sel, out=out[15]);
}
#+end_src

**** Multi-way Gates
Basically a helper to apply a logic gate $n$ times.

#+begin_src hdl :tangle projects/01/Or8Way.hdl
CHIP Or8Way {
    IN in[8];
    OUT out;

    PARTS:
    Or(a=in[0], b=in[1], out=out1);
    Or(a=in[2], b=out1, out=out2);
    Or(a=in[3], b=out2, out=out3);
    Or(a=in[4], b=out3, out=out4);
    Or(a=in[5], b=out4, out=out5);
    Or(a=in[6], b=out5, out=out6);
    Or(a=in[7], b=out6, out=out);
}
#+end_src

#+begin_src hdl :tangle projects/01/Mux4Way16.hdl
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=x);
    Mux16(a=c, b=d, sel=sel[0], out=y);
    Mux16(a=x, b=y, sel=sel[1], out=out);
}
#+end_src

#+begin_src hdl :tangle projects/01/Mux8Way16.hdl
CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux4Way16(a=a, b=b, c=c, d=d, sel=sel[0..1], out=x);
    Mux4Way16(a=e, b=f, c=g, d=h, sel=sel[0..1], out=y);
    Mux16(a=x, b=y, sel=sel[2], out=out);
}
#+end_src

#+begin_src hdl :tangle projects/01/DMux4Way.hdl
CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    DMux(in=in, sel=sel[1], a=ab, b=cd);
    DMux(in=ab, sel=sel[0], a=a, b=b);
    DMux(in=cd, sel=sel[0], a=c, b=d);
}
#+end_src

#+begin_src hdl :tangle projects/01/DMux8Way.hdl
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    DMux(in=in, sel=sel[2], a=abcd, b=efgh);
    DMux4Way(in=abcd, sel=sel[0..1], a=a, b=b, c=c, d=d);
    DMux4Way(in=efgh, sel=sel[0..1], a=e, b=f, c=g, d=h);
}
#+end_src

**** Everything from NAND
Read appendix 1.
**** Table2Expr
Read appendix 1.

*** Boolean Arithmetic

**** Half-adder

Since 1 + 1 = 0:

$s(x, y) = x \oplus y$

Only carries if both are 1:

$c(x, y) = x \wedge y$

#+begin_src hdl :tangle projects/02/HalfAdder.hdl
CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b
        carry;  // Left bit of a + b

    PARTS:
    Xor(a=a, b=b, out=sum);
    And(a=a, b=b, out=carry);
}
#+end_src

**** Full-adder

Idk how to describe this with a equation, so fuck it.

#+begin_src hdl :tangle projects/02/FullAdder.hdl
CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    HalfAdder(a=a, b=b, carry=c1, sum=x);
    HalfAdder(a=x, b=c, carry=c2, sum=sum);
    Or(a=c1, b=c2, out=carry);
}
#+end_src

**** TODO Adder

[ ] - Take a look at carry look-ahead techniques to improve this chip.

#+begin_src hdl :tangle projects/02/Add16.hdl
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    HalfAdder(a=a[0], b=b[0], carry=c1, sum=out[0]);
    FullAdder(a=a[1], b=b[1], c=c1, carry=c2, sum=out[1]);
    FullAdder(a=a[2], b=b[2], c=c2, carry=c3, sum=out[2]);
    FullAdder(a=a[3], b=b[3], c=c3, carry=c4, sum=out[3]);
    FullAdder(a=a[4], b=b[4], c=c4, carry=c5, sum=out[4]);
    FullAdder(a=a[5], b=b[5], c=c5, carry=c6, sum=out[5]);
    FullAdder(a=a[6], b=b[6], c=c6, carry=c7, sum=out[6]);
    FullAdder(a=a[7], b=b[7], c=c7, carry=c8, sum=out[7]);
    FullAdder(a=a[8], b=b[8], c=c8, carry=c9, sum=out[8]);
    FullAdder(a=a[9], b=b[9], c=c9, carry=c10, sum=out[9]);
    FullAdder(a=a[10], b=b[10], c=c10, carry=c11, sum=out[10]);
    FullAdder(a=a[11], b=b[11], c=c11, carry=c12, sum=out[11]);
    FullAdder(a=a[12], b=b[12], c=c12, carry=c13, sum=out[12]);
    FullAdder(a=a[13], b=b[13], c=c13, carry=c14, sum=out[13]);
    FullAdder(a=a[14], b=b[14], c=c14, carry=c15, sum=out[14]);
    FullAdder(a=a[15], b=b[15], c=c15, carry=c16, sum=out[15]);
}
#+end_src

**** Incrementer

#+begin_src hdl :tangle projects/02/Inc16.hdl
CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
    HalfAdder(a=in[0], b=true, carry=c1, sum=out[0]);
    HalfAdder(a=in[1], b=c1, carry=c2, sum=out[1]);
    HalfAdder(a=in[2], b=c2, carry=c3, sum=out[2]);
    HalfAdder(a=in[3], b=c3, carry=c4, sum=out[3]);
    HalfAdder(a=in[4], b=c4, carry=c5, sum=out[4]);
    HalfAdder(a=in[5], b=c5, carry=c6, sum=out[5]);
    HalfAdder(a=in[6], b=c6, carry=c7, sum=out[6]);
    HalfAdder(a=in[7], b=c7, carry=c8, sum=out[7]);
    HalfAdder(a=in[8], b=c8, carry=c9, sum=out[8]);
    HalfAdder(a=in[9], b=c9, carry=c10, sum=out[9]);
    HalfAdder(a=in[10], b=c10, carry=c11, sum=out[10]);
    HalfAdder(a=in[11], b=c11, carry=c12, sum=out[11]);
    HalfAdder(a=in[12], b=c12, carry=c13, sum=out[12]);
    HalfAdder(a=in[13], b=c13, carry=c14, sum=out[13]);
    HalfAdder(a=in[14], b=c14, carry=c15, sum=out[14]);
    HalfAdder(a=in[15], b=c15, carry=c16, sum=out[15]);
}
#+end_src

**** Arithmetic Logic Unit

_that was easier than I thought LOL_

GOAT DESIGN

#+begin_src hdl :tangle projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=rzx); // result zero x
    Mux16(a=y, b=false, sel=zy, out=rzy); // result zero y

    Not16(in=rzx, out=nrzx); // !result zero x
    Not16(in=rzy, out=nrzy); // !result zero y

    Mux16(a=rzx, b=nrzx, sel=nx, out=rnx); // result !x
    Mux16(a=rzy, b=nrzy, sel=ny, out=rny); // result !y

    Add16(a=rnx, b=rny, out=xpy); // x plus y
    And16(a=rnx, b=rny, out=xay); // x and y
    Mux16(a=xay, b=xpy, sel=f, out=xy); // xpy or xay = xy, fuck it

    Not16(in=xy, out=nxy);
    Mux16(a=xy, b=nxy, sel=no, out=out, out[15]=ng, out[0..7]=lsb, out[8..15]=msb);

    // Just check if any bit is 1, if so, carry it all over.
    Or8Way(in=lsb, out=zl); // lsb = least significative byte ~ zero 'least'
    Or8Way(in=msb, out=zm); // most significative byte ~ zero 'most'
    Or(a=zl, b=zm, out=nz); // or both
    Not(in=nz, out=zr);
}
#+end_src

*** Memory

#+begin_quote
When planning a computer, the hardware engineer chooses a cycle length that meets two design objectives. On the one hand, the cycle should be sufficiently long to contain, and neutralize, any possible time delay; on the other hand, the shorter the cycle, the faster the computer: if things happen only during cycle transitions, then obviously things happen faster when the cycles are shorter. To sum up, the cycle length is chosen to be slightly longer than the maximal time delay in any chip in the system. (p. 81)
#+end_quote

**** Bit

#+begin_src hdl :tangle projects/03/a/Bit.hdl
/**
 * 1-bit register:
 * If load is asserted, the register's value is set to in;
 * Otherwise, the register maintains its current value:
 * if (load(t)) out(t+1) = in(t), else out(t+1) = out(t)
 */

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    DFF(in=set, out=old, out=out);
    Mux(a=old, b=in, sel=load, out=set);
}
#+end_src

**** Register

#+begin_src hdl :tangle projects/03/a/Register.hdl
/**
 * 16-bit register:
 * If load is asserted, the register's value is set to in;
 * Otherwise, the register maintains its current value:
 * if (load(t)) out(t+1) = int(t), else out(t+1) = out(t)
 */
CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in=in[0], load=load, out=out[0]);
    Bit(in=in[1], load=load, out=out[1]);
    Bit(in=in[2], load=load, out=out[2]);
    Bit(in=in[3], load=load, out=out[3]);
    Bit(in=in[4], load=load, out=out[4]);
    Bit(in=in[5], load=load, out=out[5]);
    Bit(in=in[6], load=load, out=out[6]);
    Bit(in=in[7], load=load, out=out[7]);
    Bit(in=in[8], load=load, out=out[8]);
    Bit(in=in[9], load=load, out=out[9]);
    Bit(in=in[10], load=load, out=out[10]);
    Bit(in=in[11], load=load, out=out[11]);
    Bit(in=in[12], load=load, out=out[12]);
    Bit(in=in[13], load=load, out=out[13]);
    Bit(in=in[14], load=load, out=out[14]);
    Bit(in=in[15], load=load, out=out[15]);
}
#+end_src

**** Program Counter

#+begin_src hdl :tangle projects/03/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];
    
    PARTS:
    Or(a=reset, b=load, out=c);
    Or(a=c, b=inc, out=change);

    Register(in=set, load=change, out=old, out=out);
    Inc16(in=old, out=incr);

    Mux16(a=old, b=incr, sel=inc, out=oi);
    Mux16(a=oi, b=in, sel=load, out=oil);
    Mux16(a=oil, b=false, sel=reset, out=set);
}
#+end_src

**** Random-access memory

#+begin_src hdl :tangle projects/03/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    Register(in=in, load=ai, out=ao);
    Register(in=in, load=bi, out=bo);
    Register(in=in, load=ci, out=co);
    Register(in=in, load=di, out=do);
    Register(in=in, load=ei, out=eo);
    Register(in=in, load=fi, out=fo);
    Register(in=in, load=gi, out=go);
    Register(in=in, load=hi, out=ho);

    DMux8Way(in=load, sel=address, a=ai, b=bi, c=ci, d=di, e=ei, f=fi, g=gi, h=hi);
    Mux8Way16(a=ao, b=bo, c=co, d=do, e=eo, f=fo, g=go, h=ho, sel=address, out=out);
}
#+end_src

#+begin_src hdl :tangle projects/03/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    RAM8(in=in, load=l1, address=address[0..2], out=r1);
    RAM8(in=in, load=l2, address=address[0..2], out=r2);
    RAM8(in=in, load=l3, address=address[0..2], out=r3);
    RAM8(in=in, load=l4, address=address[0..2], out=r4);
    RAM8(in=in, load=l5, address=address[0..2], out=r5);
    RAM8(in=in, load=l6, address=address[0..2], out=r6);
    RAM8(in=in, load=l7, address=address[0..2], out=r7);
    RAM8(in=in, load=l8, address=address[0..2], out=r8);

    DMux8Way(in=load, sel=address[3..5], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8);
    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[3..5], out=out);
}
#+end_src

#+begin_src hdl :tangle projects/03/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    RAM64(in=in, load=l1, address=address[0..5], out=r1);
    RAM64(in=in, load=l2, address=address[0..5], out=r2);
    RAM64(in=in, load=l3, address=address[0..5], out=r3);
    RAM64(in=in, load=l4, address=address[0..5], out=r4);
    RAM64(in=in, load=l5, address=address[0..5], out=r5);
    RAM64(in=in, load=l6, address=address[0..5], out=r6);
    RAM64(in=in, load=l7, address=address[0..5], out=r7);
    RAM64(in=in, load=l8, address=address[0..5], out=r8);

    DMux8Way(in=load, sel=address[6..8], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8);
    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[6..8], out=out);
}
#+end_src

#+begin_src hdl :tangle projects/03/b/RAM4K.hdl
/**
 * Memory of 4K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    RAM512(in=in, load=l1, address=address[0..8], out=r1);
    RAM512(in=in, load=l2, address=address[0..8], out=r2);
    RAM512(in=in, load=l3, address=address[0..8], out=r3);
    RAM512(in=in, load=l4, address=address[0..8], out=r4);
    RAM512(in=in, load=l5, address=address[0..8], out=r5);
    RAM512(in=in, load=l6, address=address[0..8], out=r6);
    RAM512(in=in, load=l7, address=address[0..8], out=r7);
    RAM512(in=in, load=l8, address=address[0..8], out=r8);

    DMux8Way(in=load, sel=address[9..11], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8);
    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[9..11], out=out);
}
#+end_src

#+begin_src hdl :tangle projects/03/b/RAM16K.hdl
/**
 * Memory of 16K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    RAM4K(in=in, load=l1, address=address[0..11], out=r1);
    RAM4K(in=in, load=l2, address=address[0..11], out=r2);
    RAM4K(in=in, load=l3, address=address[0..11], out=r3);
    RAM4K(in=in, load=l4, address=address[0..11], out=r4);

    DMux4Way(in=load, sel=address[12..13], a=l1, b=l2, c=l3, d=l4);
    Mux4Way16(a=r1, b=r2, c=r3, d=r4, sel=address[12..13], out=out);
}
#+end_src
